# Generated by Django 4.2.20 on 2025-05-04 16:05

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import gestecole.utils.validators
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Classe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('niveau', models.PositiveIntegerField()),
                ('section', models.CharField(choices=[('A', 'Section A'), ('B', 'Section B'), ('C', 'Section C')], default='A', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Eleve',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_joined', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('last_login', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('identifiant', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('nom', models.CharField(max_length=100)),
                ('prenom', models.CharField(max_length=100)),
                ('prenom_parent', models.CharField(max_length=100)),
                ('nom_parent', models.CharField(max_length=100)),
                ('telephone', phonenumber_field.modelfields.PhoneNumberField(db_index=True, max_length=128, region='ML')),
                ('profile_picture', models.ImageField(default='default_profile.jpg', upload_to='eleves/', validators=[gestecole.utils.validators.validate_file_upload])),
                ('age', models.PositiveSmallIntegerField()),
                ('residence', models.CharField(max_length=50)),
                ('is_eleve', models.BooleanField(default=True, verbose_name='Un élève')),
                ('username', models.CharField(blank=True, editable=False, max_length=20, verbose_name="Nom d'utilisateur")),
                ('first_name', models.CharField(editable=False, max_length=20)),
                ('last_name', models.CharField(editable=False, max_length=20)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('password', models.CharField(max_length=128, verbose_name='Mot de Passe')),
                ('code_expiry', models.DateTimeField(default=datetime.datetime(2025, 5, 4, 16, 20, 0, 230319, tzinfo=datetime.timezone.utc), help_text="Elle s'auto saisie")),
                ('sms_code', models.CharField(blank=True, editable=False, max_length=6)),
                ('email', models.EmailField(editable=False, max_length=254)),
                ('user_type', models.CharField(default='eleve', editable=False, max_length=20)),
                ('is_superuser', models.BooleanField(default=False, editable=False)),
                ('is_staff', models.BooleanField(default=False, editable=False)),
                ('is_active', models.BooleanField(default=True, editable=False)),
                ('suspendu', models.BooleanField(default=False, verbose_name='Suspendu pour impayés')),
                ('classe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='eleves', to='APP_G2S.classe')),
                ('groups', models.ManyToManyField(blank=True, editable=False, help_text='Groupes auxquels cet utilisateur appartient.', to='auth.group', verbose_name='groupes')),
                ('user_permissions', models.ManyToManyField(blank=True, editable=False, help_text='Permissions spécifiques à cet utilisateur.', to='auth.permission', verbose_name='permissions')),
            ],
            options={
                'verbose_name': 'Elève',
                'verbose_name_plural': 'Elèves',
                'permissions': [('view_own_data', 'Peut voir ses propres données')],
            },
        ),
        migrations.CreateModel(
            name='Examen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100, verbose_name="Nom de l'examen")),
                ('date', models.DateField(verbose_name="Date de l'examen")),
                ('date_fin', models.DateField(verbose_name='Date de fin')),
                ('validite', models.CharField(choices=[('EN_COURS', 'en_cours'), ('FIN', 'fin')], max_length=20)),
                ('classe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APP_G2S.classe', verbose_name='Classe concernée')),
            ],
        ),
        migrations.CreateModel(
            name='Matiere',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100, unique=True)),
                ('coefficient', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
            ],
        ),
        migrations.CreateModel(
            name='PeriodePaiement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=50)),
                ('date_debut', models.DateField()),
                ('date_fin', models.DateField()),
                ('montant', models.DecimalField(decimal_places=2, max_digits=10)),
                ('classe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APP_G2S.classe')),
                ('examen', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APP_G2S.examen')),
            ],
        ),
        migrations.CreateModel(
            name='Periode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero', models.PositiveSmallIntegerField()),
                ('annee_scolaire', models.CharField(max_length=22)),
                ('date_debut', models.DateField()),
                ('date_fin', models.DateField()),
                ('is_active', models.BooleanField(default=False, verbose_name='Période active')),
                ('cloture', models.BooleanField(default=False)),
                ('classe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APP_G2S.classe')),
            ],
        ),
        migrations.CreateModel(
            name='Paiement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('montant_paye', models.DecimalField(decimal_places=2, max_digits=10)),
                ('date_paiement', models.DateTimeField(auto_now_add=True)),
                ('mode_paiement', models.CharField(choices=[('ORANGE', 'Orange Money'), ('MALITEL', 'M-Money'), ('ESPECES', 'Espèces')], max_length=10)),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('statut', models.BooleanField(default=False)),
                ('statut_paiement', models.CharField(choices=[('EN_ATTENTE', 'En attente'), ('REUSSI', 'Paiement réussi'), ('ECHOUE', 'Paiement échoué')], default='EN_ATTENTE', max_length=20)),
                ('suspendu', models.BooleanField(default=False)),
                ('eleve', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='paiements', to='APP_G2S.eleve')),
                ('periode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APP_G2S.periodepaiement')),
            ],
        ),
        migrations.CreateModel(
            name='NoteExamen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(40.0)], verbose_name='Note')),
                ('date', models.DateField()),
                ('est_valide', models.BooleanField(default=False)),
                ('eleve', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes_examen', to='APP_G2S.eleve')),
                ('examen', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APP_G2S.examen')),
                ('matiere', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APP_G2S.matiere')),
                ('periode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APP_G2S.periode')),
            ],
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('valeur', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(20.0)])),
                ('date', models.DateField()),
                ('classe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APP_G2S.classe')),
                ('eleve', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes_de_classe', to='APP_G2S.eleve')),
                ('examen_reference', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='APP_G2S.examen')),
                ('matiere', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APP_G2S.matiere')),
                ('periode', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='APP_G2S.periode')),
            ],
        ),
        migrations.AddField(
            model_name='examen',
            name='matieres',
            field=models.ManyToManyField(to='APP_G2S.matiere', verbose_name='Matière'),
        ),
        migrations.AddField(
            model_name='examen',
            name='periode',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='APP_G2S.periode'),
        ),
        migrations.CreateModel(
            name='Enseignant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('date_joined', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('identifiant', models.CharField(max_length=30, unique=True)),
                ('telephone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region='ML', unique=True)),
                ('nom_complet', models.CharField(max_length=100)),
                ('profile_picture', models.ImageField(default='default_profile.jpg', upload_to='enseignant/', validators=[gestecole.utils.validators.validate_file_upload])),
                ('is_enseignant', models.BooleanField(default=True)),
                ('username', models.CharField(blank=True, editable=False, max_length=20, verbose_name="Nom d'utilisateur")),
                ('email', models.EmailField(editable=False, max_length=254)),
                ('first_name', models.CharField(editable=False, max_length=20)),
                ('last_name', models.CharField(editable=False, max_length=20)),
                ('is_superuser', models.BooleanField(default=False, editable=False)),
                ('is_staff', models.BooleanField(default=False, editable=False)),
                ('is_active', models.BooleanField(default=True, editable=False)),
                ('matieres', models.ManyToManyField(related_name='enseignants', to='APP_G2S.matiere')),
            ],
            options={
                'verbose_name': 'Enseignant',
                'verbose_name_plural': 'Enseignants',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='EmploiDuTemps',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Date du cours')),
                ('start_time', models.TimeField(verbose_name='Heure de début')),
                ('end_time', models.TimeField(verbose_name='Heure de fin')),
                ('salle', models.CharField(blank=True, max_length=50, null=True)),
                ('recurrence', models.CharField(choices=[('PONCTUEL', 'Ponctuel'), ('HEBDOMADAIRE', 'Toutes les semaines'), ('MENSUEL', 'Tous les mois')], default='PONCTUEL', max_length=12)),
                ('recurrence_end', models.DateField(blank=True, null=True)),
                ('processed', models.BooleanField(default=False)),
                ('classe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emplois_du_temps', to='APP_G2S.classe')),
                ('enseignant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APP_G2S.enseignant')),
                ('matiere', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APP_G2S.matiere')),
            ],
            options={
                'verbose_name': 'Emploi du temps',
                'verbose_name_plural': 'Emplois du temps',
            },
        ),
        migrations.AddField(
            model_name='classe',
            name='matieres',
            field=models.ManyToManyField(to='APP_G2S.matiere', verbose_name='Matiere'),
        ),
        migrations.AddField(
            model_name='classe',
            name='responsable',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='APP_G2S.enseignant'),
        ),
        migrations.CreateModel(
            name='BulletinPerformance',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateField(auto_now_add=True)),
                ('date_modification', models.DateTimeField(auto_now=True)),
                ('versions', models.JSONField(default=list)),
                ('moyenne_coefficient', models.FloatField(default=0.0)),
                ('moyenne_generale', models.FloatField(default=0.0)),
                ('appreciation', models.TextField(blank=True, null=True)),
                ('classement', models.PositiveIntegerField(blank=True, null=True)),
                ('classes', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bulletins', to='APP_G2S.classe')),
                ('eleve', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bulletins', to='APP_G2S.eleve')),
                ('periode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APP_G2S.periode')),
            ],
            options={
                'verbose_name': 'Bulletin de performance',
                'verbose_name_plural': 'Bulletins de performance',
            },
        ),
        migrations.CreateModel(
            name='BulletinMatiere',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(20.0)])),
                ('bulletin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matiere', to='APP_G2S.bulletinperformance')),
                ('matiere', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APP_G2S.matiere')),
            ],
        ),
        migrations.CreateModel(
            name='ApprovalRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(max_length=50)),
                ('target_object', models.JSONField()),
                ('status', models.CharField(choices=[('PENDING', 'En attente'), ('APPROVED', 'Approuvé'), ('REJECTED', 'Rejeté')], default='PENDING', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(null=True)),
                ('comments', models.TextField(blank=True)),
                ('approver', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='requests_to_approve', to=settings.AUTH_USER_MODEL)),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests_created', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Administrateur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_joined', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('last_login', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('role', models.CharField(choices=[('DIRECTEUR', 'directeur'), ('CENSEUR', 'censeur'), ('SURVEILLANT', 'surveillant'), ('COMPTABLE', 'comptable')], max_length=20)),
                ('telephone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, null=True, region='ML', unique=True)),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('identifiant', models.CharField(max_length=20, null=True, unique=True)),
                ('prenom', models.CharField(max_length=20)),
                ('nom', models.CharField(max_length=20)),
                ('username', models.CharField(blank=True, editable=False, max_length=20, unique=True, verbose_name="Nom d'utilisateur")),
                ('first_name', models.CharField(editable=False, max_length=20)),
                ('last_name', models.CharField(editable=False, max_length=20)),
                ('password', models.CharField(max_length=128, verbose_name='Mot de Passe')),
                ('is_staff', models.BooleanField(default=False, editable=False)),
                ('is_superuser', models.BooleanField(default=False, editable=False)),
                ('is_admin', models.BooleanField(default=True, verbose_name='Compte admin')),
                ('classe_creer', models.ManyToManyField(blank=True, related_name='administration', to='APP_G2S.classe')),
                ('eleve_creer', models.ManyToManyField(blank=True, related_name='administration', to='APP_G2S.eleve')),
                ('enseignant_creer', models.ManyToManyField(blank=True, related_name='administration', to='APP_G2S.enseignant')),
                ('groups', models.ManyToManyField(blank=True, help_text='Groupes auxquels cet utilisateur appartient.', to='auth.group', verbose_name='groupes')),
                ('matiere_creer', models.ManyToManyField(blank=True, related_name='administration', to='APP_G2S.matiere')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Permissions spécifiques à cet utilisateur.', to='auth.permission', verbose_name='permissions')),
            ],
            options={
                'verbose_name': 'Administrateur',
                'verbose_name_plural': 'Administrateurs',
                'permissions': [('view_all', 'Peut voir toutes les données'), ('approve_all', 'Peut approuver toutes les actions'), ('manage_pedagogy', 'Gère la pédagogie'), ('validate_absences', 'Valider les absences')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AccessLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('action', models.CharField(max_length=100)),
                ('url', models.CharField(max_length=500)),
                ('details', models.JSONField(default=dict)),
                ('status', models.CharField(max_length=20)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Absence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('motif', models.TextField(blank=True, null=True)),
                ('justification_status', models.CharField(choices=[('NON_JUSTIFIE', 'Non justifié'), ('EN_ATTENTE', 'En attente de validation'), ('JUSTIFIE', 'Justifié')], default='NON_JUSTIFIE', max_length=20)),
                ('justification_document', models.FileField(blank=True, null=True, upload_to='justificatifs/', validators=[gestecole.utils.validators.validate_file_upload])),
                ('justification_commentaire', models.TextField(blank=True)),
                ('eleve', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='absences', to='APP_G2S.eleve')),
                ('emploi_du_temps', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APP_G2S.emploidutemps')),
            ],
        ),
        migrations.AddConstraint(
            model_name='periode',
            constraint=models.UniqueConstraint(fields=('classe', 'annee_scolaire'), name='unique_annee_classe'),
        ),
        migrations.AddConstraint(
            model_name='periode',
            constraint=models.CheckConstraint(check=models.Q(('date_fin__gt', models.F('date_debut'))), name='check_dates_ordre'),
        ),
        migrations.AddConstraint(
            model_name='noteexamen',
            constraint=models.UniqueConstraint(fields=('eleve', 'matiere', 'periode'), name='unique_note_par_matiere_periode'),
        ),
        migrations.AddConstraint(
            model_name='note',
            constraint=models.UniqueConstraint(fields=('eleve', 'matiere'), name='unique_note_par_matiere'),
        ),
        migrations.AddConstraint(
            model_name='examen',
            constraint=models.UniqueConstraint(fields=('date', 'classe'), name='unique_examen_date_classe'),
        ),
        migrations.AddConstraint(
            model_name='emploidutemps',
            constraint=models.CheckConstraint(check=models.Q(('end_time__gt', models.F('start_time'))), name='end_time_after_start_time'),
        ),
        migrations.AlterUniqueTogether(
            name='bulletinperformance',
            unique_together={('eleve', 'periode')},
        ),
        migrations.AlterUniqueTogether(
            name='bulletinmatiere',
            unique_together={('bulletin', 'matiere')},
        ),
    ]
